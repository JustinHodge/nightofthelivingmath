var __defProp=Object.defineProperty,__defNormalProp=(e,t,i)=>t in e?__defProp(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,__publicField=(e,t,i)=>__defNormalProp(e,"symbol"!=typeof t?t+"":t,i),_a,_b,_c,_d;import{p as phaserExports}from"./phaser-C2_wa_Fb.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver((e=>{for(const i of e)if("childList"===i.type)for(const e of i.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)})).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();var EQUATION_ELEMENT=(e=>(e.result="result",e.operator="operator",e.operand1="operand1",e.operand2="operand2",e))(EQUATION_ELEMENT||{}),ENEMY_TYPES=(e=>(e.bigZombie="bigZombie",e))(ENEMY_TYPES||{}),ENEMY_FACING_DIRECTIONS=(e=>(e.down="down",e.left="left",e.right="right",e.up="up",e.idle="idle",e.death="death",e))(ENEMY_FACING_DIRECTIONS||{});const ASSETS_PATH="assets",GAME_WIDTH=1024,GAME_HEIGHT=768,GAME_MIDDLE_X=GAME_WIDTH/2,GAME_MIDDLE_Y=GAME_HEIGHT/2,GAME_PARENT_KEY="game-container",GAME_BACKGROUND_COLOR=" #222222",GAME_DEFAULT_PHYSICS_SYSTEM="arcade",PROGRESS_BAR_CONTAINER_HEIGHT=32,PROGRESS_BAR_CONTAINER_WIDTH=468,PROGRESS_BAR_CONTAINER_STROKE_WIDTH=1,PROGRESS_BAR_CONTAINER_STROKE_COLOR=16777215,PROGRESS_BAR_CONTAINER_Y_PADDING=2,PROGRESS_BAR_CONTAINER_X_PADDING=13,PROGRESS_BAR_FILL_X=GAME_MIDDLE_X-(PROGRESS_BAR_CONTAINER_WIDTH-2*PROGRESS_BAR_CONTAINER_X_PADDING)/2,PROGRESS_BAR_FILL_Y=GAME_MIDDLE_Y,PROGRESS_BAR_FILL_HEIGHT=PROGRESS_BAR_CONTAINER_HEIGHT-2*PROGRESS_BAR_CONTAINER_Y_PADDING,PROGRESS_BAR_FILL_COLOR=16777215,PROGRESS_BAR_FILL_INITIAL_WIDTH=4,PROGRESS_BAR_FILL_MAX_WIDTH=PROGRESS_BAR_CONTAINER_WIDTH-2*PROGRESS_BAR_CONTAINER_X_PADDING,LOGO_KEY="logo",LOGO_FILENAME="logo.png",MAP_NODES_KEY="mapNodes",MAP_NODES_FILENAME="nightofthelivingmathmap.json",ATLAS_KEY="atlas",ATLAS_JSON_FILENAME="atlas.json",ATLAS_IMAGE_FILENAME="atlas.png",PLAYER_SPRITE_ATLAS_KEY="player-sprites",PLAYER_SPRITE_ATLAS_JSON_FILENAME="player-sprites.json",PLAYER_SPRITE_ATLAS_IMAGE_FILENAME="player-sprites.png",HUD_KEY="hud",HUD_FILENAME="HUD.png",BACKGROUND_IMAGE="nightofthelivingmathmap.png",BACKGROUND_KEY="background",MAIN_MENU_BACKGROUND_ALPHA=.7,MAIN_MENU_BACKGROUND_TINT=14540253,MAIN_MENU_CURSOR="auto",MAIN_MENU_CONTAINER_X=GAME_MIDDLE_X,MAIN_MENU_CONTAINER_Y=GAME_MIDDLE_Y,MAIN_MENU_CONTAINER_WIDTH=600,MAIN_MENU_CONTAINER_HEIGHT=600,MAIN_MENU_CONTAINER_FILL_COLOR=13421772,MAIN_MENU_CONTAINER_FILL_ALPHA=.5,MAIN_MENU_CONTAINER_STROKE_COLOR=0,MAIN_MENU_CONTAINER_STROKE_WIDTH=3,MAIN_MENU_DIFFICULTY_SELECTOR_PADDING_Y=0,MAIN_MENU_DIFFICULTY_SELECTOR_HIGHLIGHT_COLOR=10878976,MAIN_MENU_DIFFICULTY_SELECTOR_TEXT_STYLE={fontFamily:"Arial Black",fontSize:24,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"},GAME_CURSOR="none",BASE_ENEMY_DAMAGE=1,PLAYER_START_X=GAME_MIDDLE_X,PLAYER_START_Y=GAME_MIDDLE_Y,PLAYER_SPRITE_FRAME_3="crosshair/crosshair3.png",PLAYER_SPRITE_FRAME_4="crosshair/crosshair4.png",PLAYER_SPRITE_FRAME_5="crosshair/crosshair5.png",PLAYER_SPRITE_MISS_FRAME="crosshair/crosshairmiss.png",PLAYER_SPRITE_HIT_FRAME="crosshair/crosshairhit.png",PLAYER_MAX_HEALTH=16,PLAYER_SPRITE_SCALE=2,PLAYER_HEALTH_ORB_SPRITE_FRAMES={0:"health/health0.png",1:"health/health1.png",2:"health/health2.png",3:"health/health3.png",4:"health/health4.png"},PLAYER_HEALTH_ORB_IMAGE_SIZE=64,HUD_DIGIT_MAP={0:"UI Elements/Zombie-Tileset---_0501",1:"UI Elements/Zombie-Tileset---_0502",2:"UI Elements/Zombie-Tileset---_0503",3:"UI Elements/Zombie-Tileset---_0504",4:"UI Elements/Zombie-Tileset---_0505",5:"UI Elements/Zombie-Tileset---_0506",6:"UI Elements/Zombie-Tileset---_0507",7:"UI Elements/Zombie-Tileset---_0508",8:"UI Elements/Zombie-Tileset---_0509",9:"UI Elements/Zombie-Tileset---_0510"},HUD_NO_ENEMY_STRING="NO ENEMY!",HUD_LOADED_EQUATION_TEXT_STYLE={fontSize:"20px",stroke:"#000000",strokeThickness:4,align:"left"},HUD_SCORE_DISPLAY_DIGITS=6,HUD_SCORE_DISPLAY_DIGIT_PADDING=10,EQUATION_DEFAULT_HIDDEN_COMPONENT="result",ENEMY_SPEECH_BUBBLE_TEXT_STYLE={padding:{x:1,y:1},backgroundColor:"#ffffff99",color:"#000000",fontSize:"1.5rem",align:"center",shadow:{offsetX:2,offsetY:2,blur:2,color:"#000000",fill:!0,stroke:!0}},ENEMY_ANIMATION_FRAME_RATE=5,ENEMY_DATA={bigZombie:{animationFrameData:{down:{prefix:"Big Zombie Walking Animation Frames/Zombie-Tileset---_",digitsInFrame:4,frameSet:[412,413,414]},left:{prefix:"Big Zombie Walking Animation Frames/Zombie-Tileset---_",digitsInFrame:4,frameSet:[415,416,417]},right:{prefix:"Big Zombie Walking Animation Frames/Zombie-Tileset---_",digitsInFrame:4,frameSet:[415,416,417]},up:{prefix:"Big Zombie Walking Animation Frames/Zombie-Tileset---_",digitsInFrame:4,frameSet:[418,419,420]},death:{prefix:"Damaged Big Zombie Animation Frames/Zombie-Tileset---_",digitsInFrame:4,frameSet:[421,422,421,422,421,422,423]},idle:{prefix:"Big Zombie Walking Animation Frames/Zombie-Tileset---_",digitsInFrame:4,frameSet:[412,415,418,421]}},getScoreMultiplier:()=>100}},EQUATION_BACKGROUND_MARGIN=10,LOADED_EQUATION_BACKGROUND_IMAGE="Inventory interface/SHOTGUN_SLOT",ITEM_EMPTY_BACKGROUND_IMAGE="Inventory interface/EMPTY_SLOT",ITEM_HEALTH_KIT_BACKGROUND_IMAGE="Inventory interface/HEALTH_KIT_SLOT",ITEM_BOMB_BACKGROUND_IMAGE="Inventory interface/GRENADE_SLOT",DROP_BOMB_IMAGE="Pickable Items and Weapons/Zombie-Tileset---_0328",DROP_HEALTH_KIT_IMAGE="Pickable Items and Weapons/Zombie-Tileset---_0340",PLAYER_SPRITE_DEPTH=1700,PLAYER_HEALTH_ORB_DEPTH=100,HUD_DEPTH=1600,LOADED_EQUATION_ELEMENT_DEPTH=1601,SCORE_DISPLAY_DEPTH=1602,REGISTRY_DIFFICULTY_KEY="difficulty",PLAYER_IDLE_ANIMATION_KEY="PlayerIdleAnimation",PLAYER_MISS_ANIMATION_KEY="PlayerMissAnimation",PLAYER_HIT_ANIMATION_KEY="PlayerHitAnimation",ENEMY_DEATH_ANIMATION_KEY="EnemyDeathAnimation",ENEMY_WALK_DOWN_ANIMATION_KEY="EnemyWalkDownAnimation",ENEMY_WALK_LEFT_ANIMATION_KEY="EnemyWalkLeftAnimation",ENEMY_WALK_RIGHT_ANIMATION_KEY="EnemyWalkRightAnimation",ENEMY_WALK_UP_ANIMATION_KEY="EnemyWalkUpAnimation",LOAD_PROGRESS_EVENT_KEY="progress",POINTER_DOWN_EVENT_KEY="pointerdown",POINTER_OVER_EVENT_KEY="pointerover",POINTER_OUT_EVENT_KEY="pointerout",POINTER_MOVE_EVENT_KEY="pointermove",ANIMATION_COMPLETED_EVENT_KEY="animationcomplete",ENEMY_HIT_PLAYER_EVENT_KEY="enemyHitPlayer",PLAYER_KILLED_ENEMY_EVENT_KEY="playerKilledEnemy",PLAYER_HIT_ENEMY_EVENT_KEY="playerHitEnemy",PLAYER_RELOAD_EVENT_KEY="playerReload",PLAYER_PICKED_UP_DROP_EVENT_KEY="playerPickedUpDrop",PLAYER_HEAL_EVENT_KEY="playerHeal",PLAYER_BOMB_EVENT_KEY="playerBomb",PRELOADER_SCENE_KEY="Preloader",MAIN_MENU_SCENE_KEY="MainMenu",GAME_SCENE_KEY="Game",GAME_OVER_SCENE_KEY="GameOver",BOOT_SCENE_KEY="Boot",MILLIS_IN_SECOND=1e3,RIGHT_FACING_ANGLES={max:Math.PI/4,min:2*Math.PI-Math.PI/4},DOWN_FACING_ANGLES={max:Math.PI/2+Math.PI/4,min:Math.PI/4},LEFT_FACING_ANGLES={max:Math.PI+Math.PI/4,min:Math.PI/2+Math.PI/4},UP_FACING_ANGLES={max:2*Math.PI-Math.PI/4,min:Math.PI+Math.PI/4},ANIMATION_INFINITE_REPEAT=-1,DIFFICULTIES=[{label:"Beginner",difficultyNumber:1,description:"Addition Only",hidableElements:["operand1","operand2","result"],operators:["+"]},{label:"Easy",difficultyNumber:2,description:"Addition and Subtraction",hidableElements:["operand1","operand2","result"],operators:["+","-"]},{label:"Medium",difficultyNumber:3,description:"Challenging Addition And Subtraction",hidableElements:["operand1","operand2","result","operator"],operators:["+","-"]},{label:"Hard",difficultyNumber:4,description:"Addition, Subtraction, Multiplication, and Division",hidableElements:["operand1","operand2","result"],operators:["+","-","*","/"]},{label:"Impossible",difficultyNumber:5,description:"Challenging Addition, Subtraction, Multiplication, and Division",hidableElements:["operand1","operand2","result","operator"],operators:["+","-","*","/"]}];class Boot extends phaserExports.Scene{constructor(){super(BOOT_SCENE_KEY)}preload(){this.load.setPath(ASSETS_PATH),this.load.image(BACKGROUND_KEY,BACKGROUND_IMAGE)}create(){this.scene.start(PRELOADER_SCENE_KEY)}}const generateFrameObjects=({prefix:e,digitsInFrame:t,frameSet:i},E=ATLAS_KEY)=>i.map((i=>({key:E,frame:`${e}${i.toString().padStart(t,"0")}`}))),generateFrameKeys=({prefix:e,digitsInFrame:t,frameSet:i})=>i.map((i=>`${e}${i.toString().padStart(t,"0")}`));class Enemy extends Phaser.Physics.Arcade.Sprite{constructor({scene:e,path:t,equation:i}){if(t.length<1)throw new Error("Path must have at least one node");const E=ENEMY_TYPES.bigZombie;super(e,t[0].x,t[0].y,ATLAS_KEY,generateFrameKeys(ENEMY_DATA[E].animationFrameData[ENEMY_FACING_DIRECTIONS.down])[0]),__publicField(this,"path",[]),__publicField(this,"speechBubble"),__publicField(this,"facingDirection",ENEMY_FACING_DIRECTIONS.down),__publicField(this,"equation"),__publicField(this,"isDead",!1),__publicField(this,"enemyType",ENEMY_TYPES.bigZombie),__publicField(this,"movementSpeed"),this.facingDirection=ENEMY_FACING_DIRECTIONS.down,e.physics.world.enableBody(this,0),this.createAnims(),this.movementSpeed=Math.floor(25*Math.random())+50,this.equation=i,this.buildSpeechBubble(),this.setScale(3),this.setPath(t),this.setAnimation(this.facingDirection),this.setInteractive(),this.on(POINTER_DOWN_EVENT_KEY,(()=>{this.scene.events.emit(PLAYER_HIT_ENEMY_EVENT_KEY,this)})),e.add.existing(this)}getScoreValue(){return ENEMY_DATA[this.enemyType].getScoreMultiplier()*this.scene.registry.get(REGISTRY_DIFFICULTY_KEY).difficultyNumber}getNextPathNode(){return this.path[0]}updateNextPathNode(){const e=Math.abs(this.path[0].x-this.x),t=Math.abs(this.path[0].y-this.y);if(e<=1&&t<=1&&(this.path.shift(),this.path.length>0)){const e={x:this.x,y:this.y},t={x:this.path[0].x,y:this.path[0].y};this.setFacingDirection(e,t)}}update(){this.move(),this.speechBubble.x=this.x+this.width/2-this.speechBubble.width/2,this.speechBubble.y=this.y+this.height/2+this.speechBubble.height/2,this.path.length<=0&&!this.isDead&&(this.kill(),this.scene.events.emit(ENEMY_HIT_PLAYER_EVENT_KEY))}getPlayerTarget(){var e;return(null==(e=this.equation)?void 0:e.getPlayerString())||null}attemptKill(e){const t=this===e;if(t){this.kill();const e={score:this.getScoreValue(),killPosition:{x:this.x,y:this.y}};this.scene.events.emit(PLAYER_KILLED_ENEMY_EVENT_KEY,e)}return t}buildSpeechBubble(){var e;const t=this.x-this.width/2,i=this.y-this.height/2,E=(null==(e=this.equation)?void 0:e.getEnemyString())??"";this.speechBubble=this.scene.add.text(t,i,E??"FREEBIE",ENEMY_SPEECH_BUBBLE_TEXT_STYLE)}setPath(e){this.path=[];for(const t of e){const e={x:t.x+Math.floor(Math.random()*t.width),y:t.y+Math.floor(Math.random()*t.height)};this.path.push(e)}}move(){if(this.isDead)return void this.setVelocity(0);const{x:e,y:t}=this.getNextPathNode();this.scene.physics.moveTo(this,e,t,this.movementSpeed),this.updateNextPathNode()}kill(){this.isDead=!0,this.play(ENEMY_DEATH_ANIMATION_KEY),this.on(ANIMATION_COMPLETED_EVENT_KEY,(()=>{this.speechBubble.destroy(),this.destroy()}),ENEMY_DEATH_ANIMATION_KEY)}setFacingDirection(e,t){const i=Phaser.Math.Angle.Normalize(Phaser.Math.Angle.BetweenPoints(e,t));(i>=RIGHT_FACING_ANGLES.min||i<RIGHT_FACING_ANGLES.max)&&(this.facingDirection=ENEMY_FACING_DIRECTIONS.right),i>=DOWN_FACING_ANGLES.min&&i<DOWN_FACING_ANGLES.max&&(this.facingDirection=ENEMY_FACING_DIRECTIONS.down),i>=LEFT_FACING_ANGLES.min&&i<LEFT_FACING_ANGLES.max&&(this.facingDirection=ENEMY_FACING_DIRECTIONS.left),i>=UP_FACING_ANGLES.min&&i<UP_FACING_ANGLES.max&&(this.facingDirection=ENEMY_FACING_DIRECTIONS.up),this.setAnimation(this.facingDirection)}setAnimation(e){switch(e){case ENEMY_FACING_DIRECTIONS.up:this.play(ENEMY_WALK_UP_ANIMATION_KEY);break;case ENEMY_FACING_DIRECTIONS.down:this.play(ENEMY_WALK_DOWN_ANIMATION_KEY);break;case ENEMY_FACING_DIRECTIONS.left:this.play(ENEMY_WALK_LEFT_ANIMATION_KEY),this.flipX=!1;break;case ENEMY_FACING_DIRECTIONS.right:this.play(ENEMY_WALK_RIGHT_ANIMATION_KEY),this.flipX=!0;break;case ENEMY_FACING_DIRECTIONS.idle:default:this.stop()}}createAnims(){this.anims.create({key:ENEMY_WALK_DOWN_ANIMATION_KEY,frames:generateFrameObjects(ENEMY_DATA[ENEMY_TYPES.bigZombie].animationFrameData[ENEMY_FACING_DIRECTIONS.down]),frameRate:ENEMY_ANIMATION_FRAME_RATE,repeat:ANIMATION_INFINITE_REPEAT}),this.anims.create({key:ENEMY_WALK_UP_ANIMATION_KEY,frames:generateFrameObjects(ENEMY_DATA[ENEMY_TYPES.bigZombie].animationFrameData[ENEMY_FACING_DIRECTIONS.up]),frameRate:ENEMY_ANIMATION_FRAME_RATE,repeat:ANIMATION_INFINITE_REPEAT}),this.anims.create({key:ENEMY_WALK_LEFT_ANIMATION_KEY,frames:generateFrameObjects(ENEMY_DATA[ENEMY_TYPES.bigZombie].animationFrameData[ENEMY_FACING_DIRECTIONS.left]),frameRate:ENEMY_ANIMATION_FRAME_RATE,repeat:ANIMATION_INFINITE_REPEAT}),this.anims.create({key:ENEMY_WALK_RIGHT_ANIMATION_KEY,frames:generateFrameObjects(ENEMY_DATA[ENEMY_TYPES.bigZombie].animationFrameData[ENEMY_FACING_DIRECTIONS.right]),frameRate:ENEMY_ANIMATION_FRAME_RATE,repeat:ANIMATION_INFINITE_REPEAT}),this.anims.create({key:ENEMY_DEATH_ANIMATION_KEY,frames:generateFrameObjects(ENEMY_DATA[ENEMY_TYPES.bigZombie].animationFrameData[ENEMY_FACING_DIRECTIONS.death]),frameRate:ENEMY_ANIMATION_FRAME_RATE,repeat:0})}}class Player extends Phaser.Physics.Arcade.Sprite{constructor(e){super(e,PLAYER_START_X,PLAYER_START_Y,PLAYER_SPRITE_ATLAS_KEY,PLAYER_SPRITE_FRAME_3),__publicField(this,"health",PLAYER_MAX_HEALTH),__publicField(this,"healthOrbs",[]),e.physics.world.enableBody(this,0),e.add.existing(this),e.input.on(POINTER_MOVE_EVENT_KEY,(e=>{this.setPosition(e.x,e.y),this.setDepth(PLAYER_SPRITE_DEPTH),this.setScale(PLAYER_SPRITE_SCALE)})),this.setHealthOrbs(),this.createAnims(),this.play(PLAYER_IDLE_ANIMATION_KEY)}isDead(){return this.health<=0}animateHit(){this.play(PLAYER_HIT_ANIMATION_KEY).chain(PLAYER_IDLE_ANIMATION_KEY)}animateMiss(){this.play(PLAYER_MISS_ANIMATION_KEY).chain(PLAYER_IDLE_ANIMATION_KEY)}takeDamage(e){this.health=Math.max(this.health-e,0),this.setHealthOrbs()}heal(e){this.health=Math.min(this.health+e,PLAYER_MAX_HEALTH),this.setHealthOrbs()}setHealthOrbs(){for(const e of this.healthOrbs)e.destroy();this.healthOrbs=[];for(let e=0;e<Math.ceil(PLAYER_MAX_HEALTH/4);e++){const t=this.health-4*e,i=t>=0?Math.min(t,Object.keys(PLAYER_HEALTH_ORB_SPRITE_FRAMES).length-1):0,E=PLAYER_HEALTH_ORB_SPRITE_FRAMES[i],_=PLAYER_HEALTH_ORB_IMAGE_SIZE,s=this.scene.add.sprite(GAME_WIDTH-75,e*_,PLAYER_SPRITE_ATLAS_KEY,E).setOrigin(0,0).setDepth(PLAYER_HEALTH_ORB_DEPTH);this.healthOrbs.push(s)}}createAnims(){this.anims.create({key:PLAYER_MISS_ANIMATION_KEY,frames:[{key:PLAYER_SPRITE_ATLAS_KEY,frame:PLAYER_SPRITE_MISS_FRAME}],frameRate:3,repeat:0}),this.anims.create({key:PLAYER_HIT_ANIMATION_KEY,frames:[{key:PLAYER_SPRITE_ATLAS_KEY,frame:PLAYER_SPRITE_HIT_FRAME}],frameRate:3,repeat:0}),this.anims.create({key:PLAYER_IDLE_ANIMATION_KEY,frames:[{key:PLAYER_SPRITE_ATLAS_KEY,frame:PLAYER_SPRITE_FRAME_3},{key:PLAYER_SPRITE_ATLAS_KEY,frame:PLAYER_SPRITE_FRAME_4},{key:PLAYER_SPRITE_ATLAS_KEY,frame:PLAYER_SPRITE_FRAME_5}],frameRate:1,repeat:-1})}}_d=EQUATION_ELEMENT.operand1,_c=EQUATION_ELEMENT.operand2,_b=EQUATION_ELEMENT.operator,_a=EQUATION_ELEMENT.result;class Equation{constructor(e){__publicField(this,_d),__publicField(this,_c),__publicField(this,_b),__publicField(this,_a),__publicField(this,"enemyString",""),__publicField(this,"playerString",""),__publicField(this,"hiddenComponent",EQUATION_DEFAULT_HIDDEN_COMPONENT),this.generateEquation(e)}getEnemyString(){return this.enemyString}getPlayerString(){return this.playerString}generateEquation(difficulty){var _a2,_b2,_c2;const operators=difficulty.operators;for(this.operator={value:operators[Math.floor(Math.random()*operators.length)],visible:!0};!Number.isInteger(null==(_a2=this[EQUATION_ELEMENT.operand1])?void 0:_a2.value)||!Number.isInteger(null==(_b2=this[EQUATION_ELEMENT.operand2])?void 0:_b2.value)||!Number.isInteger(null==(_c2=this.result)?void 0:_c2.value);){this[EQUATION_ELEMENT.operand1]={value:Math.floor(100*Math.random()),visible:!0},this[EQUATION_ELEMENT.operand2]={value:Math.floor(100*Math.random()),visible:!0};const testString=(this[EQUATION_ELEMENT.operand1].value+this.operator.value+this[EQUATION_ELEMENT.operand2].value).toString();this.result={value:eval(testString),visible:!0}}this.hideElement(difficulty),this.buildPlayerString(),this.buildEnemyString()}hideElement(e){const t=e.hidableElements;this.hiddenComponent=t[Math.floor(Math.random()*t.length)],this[this.hiddenComponent].visible=!1}buildEnemyString(){this.enemyString=this[this.hiddenComponent].value.toString()}buildPlayerString(){this.playerString+=this[EQUATION_ELEMENT.operand1].visible?this[EQUATION_ELEMENT.operand1].value:" ? ",this.playerString+=this.operator.visible?this.operator.value:" ? ",this.playerString+=this[EQUATION_ELEMENT.operand2].visible?this[EQUATION_ELEMENT.operand2].value:" ? ",this.playerString+="=",this.playerString+=this.result.visible?this.result.value:" ? "}}class Hud extends Phaser.GameObjects.Image{constructor(e){super(e,0,0,HUD_KEY),__publicField(this,"scoreDisplay",[]),__publicField(this,"loadedEquationElement"),__publicField(this,"loadedEquationContainer"),__publicField(this,"itemContainer"),this.setScale(GAME_WIDTH/this.width),this.setY(GAME_HEIGHT-this.height),this.setX(GAME_WIDTH/2),this.setDepth(HUD_DEPTH),this.initScoreDisplay(),this.initLoadedEquationContainer(),this.initItemContainer(),e.add.existing(this)}setScore(e){const t=e.toString().padStart(HUD_SCORE_DISPLAY_DIGITS,"0");for(let i=0;i<HUD_SCORE_DISPLAY_DIGITS;i++)this.scoreDisplay[i].setTexture(ATLAS_KEY,HUD_DIGIT_MAP[t[i]??"0"])}setCurrentItem(e){const t=this.itemContainer.getByName("itemBackgroundSprite");if("Sprite"!==t.type)throw new Error("Item container is not a sprite");switch(t.off(POINTER_DOWN_EVENT_KEY),e){case"HEALTH_KIT":t.setTexture(ATLAS_KEY,ITEM_HEALTH_KIT_BACKGROUND_IMAGE),t.on(POINTER_DOWN_EVENT_KEY,(()=>{this.scene.events.emit(PLAYER_HEAL_EVENT_KEY)}));break;case"DROP_BOMB":t.setTexture(ATLAS_KEY,ITEM_BOMB_BACKGROUND_IMAGE),t.on(POINTER_DOWN_EVENT_KEY,(()=>{this.scene.events.emit(PLAYER_BOMB_EVENT_KEY)}));break;default:t.setTexture(ATLAS_KEY,ITEM_EMPTY_BACKGROUND_IMAGE),t.on(POINTER_DOWN_EVENT_KEY,(()=>{}))}}setLoadedEquationElement(e){this.loadedEquationElement.setText(e??HUD_NO_ENEMY_STRING)}initLoadedEquationContainer(){const e=.22*this.displayWidth/2;this.loadedEquationElement=new Phaser.GameObjects.Text(this.scene,-45,0,"",HUD_LOADED_EQUATION_TEXT_STYLE),this.loadedEquationElement.setOrigin(0,0);const t=new Phaser.GameObjects.Sprite(this.scene,0,0,ATLAS_KEY,LOADED_EQUATION_BACKGROUND_IMAGE);t.setDisplaySize(e,this.displayHeight-EQUATION_BACKGROUND_MARGIN),this.loadedEquationContainer=new Phaser.GameObjects.Container(this.scene,0,0,[t,this.loadedEquationElement]),this.loadedEquationContainer.setX(this.displayWidth-2*e),this.loadedEquationContainer.setY(GAME_HEIGHT-this.displayHeight/2+EQUATION_BACKGROUND_MARGIN/2),this.scene.add.existing(this.loadedEquationContainer),this.loadedEquationContainer.setDepth(LOADED_EQUATION_ELEMENT_DEPTH),t.setInteractive(),t.on(POINTER_DOWN_EVENT_KEY,(()=>{this.loadedEquationElement.setText(""),this.scene.add.tween({targets:t,scale:2,duration:500,yoyo:!0,repeat:1,ease:"Linear"}).setCallback("onUpdate",(e=>{const t=e.totalProgress;this.loadedEquationElement.setText(".".repeat(Math.floor(4*t*2)%4))})).setCallback("onComplete",(()=>{this.scene.events.emit(PLAYER_RELOAD_EVENT_KEY)}))})),this.setLoadedEquationElement(null)}initItemContainer(){const e=.22*this.displayWidth/2-EQUATION_BACKGROUND_MARGIN;this.itemContainer=new Phaser.GameObjects.Container(this.scene,0,0);const t=new Phaser.GameObjects.Sprite(this.scene,EQUATION_BACKGROUND_MARGIN/2,EQUATION_BACKGROUND_MARGIN/2,ATLAS_KEY,ITEM_EMPTY_BACKGROUND_IMAGE);t.setName("itemBackgroundSprite"),t.setDisplaySize(e,this.displayHeight-EQUATION_BACKGROUND_MARGIN),t.setInteractive(),this.itemContainer.add(t),this.itemContainer.setX(GAME_WIDTH-e),this.itemContainer.setY(GAME_HEIGHT-this.displayHeight/2),this.itemContainer.setDepth(LOADED_EQUATION_ELEMENT_DEPTH),this.scene.add.existing(this.itemContainer)}initScoreDisplay(){this.scoreDisplay=[];for(let e=0;e<HUD_SCORE_DISPLAY_DIGITS;e++){const t=new Phaser.GameObjects.Image(this.scene,0,0,ATLAS_KEY,HUD_DIGIT_MAP[0]);t.setScale(3),t.setDepth(SCORE_DISPLAY_DEPTH);const i=150+e*(t.displayWidth+HUD_SCORE_DISPLAY_DIGIT_PADDING),E=this.scene.sys.canvas.height-t.displayHeight;t.setX(i),t.setY(E),this.scene.add.existing(t),this.scoreDisplay.push(t)}this.setScore(0)}}class Drop{constructor(e,t){__publicField(this,"scene"),__publicField(this,"position"),__publicField(this,"POSSIBLE_DROPS",{HEALTH_KIT:{imageFile:DROP_HEALTH_KIT_IMAGE,weight:2},DROP_BOMB:{imageFile:DROP_BOMB_IMAGE,weight:1}}),__publicField(this,"dropKeyOptions",[]),this.scene=e,this.position=t,this.dropKeyOptions=Object.keys(this.POSSIBLE_DROPS).reduce(((e,t)=>{for(let i=0;i<this.POSSIBLE_DROPS[t].weight;i++)e.push(t);return e}),[])}generateRandom(){if(!(Math.random()<.5))return;const e=Phaser.Utils.Array.GetRandom(this.dropKeyOptions),t=new Phaser.GameObjects.Sprite(this.scene,this.position.x,this.position.y,ATLAS_KEY,this.POSSIBLE_DROPS[e].imageFile);return t.setScale(3),this.scene.time.addEvent({delay:2e3,callback:()=>{this.scene.add.tween({targets:t,alpha:0,duration:400,repeat:5,onComplete:()=>{t.destroy()}})},loop:!1}),t.setInteractive(),t.addListener(POINTER_DOWN_EVENT_KEY,(()=>{this.scene.events.emit(PLAYER_PICKED_UP_DROP_EVENT_KEY,{drop:e}),t.destroy()})),t}}class Game extends phaserExports.Scene{constructor(){super(GAME_SCENE_KEY),__publicField(this,"camera"),__publicField(this,"background"),__publicField(this,"msg_text"),__publicField(this,"enemies",[]),__publicField(this,"player"),__publicField(this,"difficulty"),__publicField(this,"lastSpawnTime"),__publicField(this,"hud"),__publicField(this,"currentScore",0),__publicField(this,"targetEnemy"),__publicField(this,"PATH_NODES")}create(){this.difficulty=this.registry.get(REGISTRY_DIFFICULTY_KEY),this.PATH_NODES=this.cache.json.get(MAP_NODES_KEY),this.lastSpawnTime=this.time.now,this.camera=this.cameras.main,this.background=this.add.image(GAME_MIDDLE_X,GAME_MIDDLE_Y,BACKGROUND_KEY),this.hud=new Hud(this),this.createPlayer(),this.startCountdown()}update(){this.enemies=this.enemies.filter((e=>e.active)),this.checkGameOver(),this.enemies.forEach((e=>{e.update()})),this.player.update(),this.handleSpawns()}checkGameOver(){this.player.isDead()&&(this.enemies=[],this.registry.set("finalScore",this.currentScore),this.scene.stop(GAME_SCENE_KEY),this.scene.start(GAME_OVER_SCENE_KEY))}startCountdown(){const e=this.add.text(GAME_MIDDLE_X,GAME_MIDDLE_Y,"",{fontSize:"32px",color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"});e.setOrigin(.5,.5),this.player.setActive(!1),this.player.setVisible(!1);for(let t=0;t<=5;t++){if(t>=5){this.time.addEvent({delay:t*MILLIS_IN_SECOND,callback:()=>{e.destroy(),this.player.setActive(!0),this.player.setVisible(!0)}});break}this.time.addEvent({delay:t*MILLIS_IN_SECOND,callback:()=>{e.setText(`GET READY... ${5-t}\n                        }`),this.updateTargetEnemy()}})}}createPlayer(){this.player=new Player(this),this.input.setDefaultCursor(GAME_CURSOR),this.createEventHandlers()}addScore(e){this.currentScore+=e,this.hud.setScore(this.currentScore)}createEventHandlers(){this.events.on(ENEMY_HIT_PLAYER_EVENT_KEY,(()=>{this.player.takeDamage(BASE_ENEMY_DAMAGE),this.updateTargetEnemy()})),this.events.on(PLAYER_KILLED_ENEMY_EVENT_KEY,(({score:e,killPosition:t})=>{this.addScore(e);const i=new Drop(this,t).generateRandom();i&&this.add.existing(i),this.updateTargetEnemy()})),this.events.on(PLAYER_HIT_ENEMY_EVENT_KEY,(e=>{this.player.animateHit(),e.attemptKill(this.targetEnemy)||this.player.takeDamage(this.registry.get(REGISTRY_DIFFICULTY_KEY).difficultyNumber)})),this.events.on(PLAYER_RELOAD_EVENT_KEY,(()=>{this.updateTargetEnemy()})),this.events.on(PLAYER_PICKED_UP_DROP_EVENT_KEY,(({drop:e})=>{this.hud.setCurrentItem(e)})),this.events.on(PLAYER_HEAL_EVENT_KEY,(()=>{this.player.heal(4),this.hud.setCurrentItem(null)})),this.events.on(PLAYER_BOMB_EVENT_KEY,(()=>{for(const e of this.enemies)e.attemptKill(e);this.hud.setCurrentItem(null)}))}updateTargetEnemy(){this.targetEnemy=this.enemies[Math.floor(Math.random()*this.enemies.length)],this.targetEnemy&&this.hud.setLoadedEquationElement(this.targetEnemy.getPlayerTarget())}handleSpawns(e=!1){const t=this.shouldSpawn(e);if(e||t){const e=new Equation(this.difficulty);this.targetEnemy||(this.targetEnemy=this.enemies[Math.floor(Math.random()*this.enemies.length)]);const t=new Enemy({scene:this,equation:e,path:this.PATH_NODES});this.enemies.push(t),this.lastSpawnTime=this.time.now,this.enemies.length<=1&&this.updateTargetEnemy()}}shouldSpawn(e=!1){const t=(this.time.now-this.time.startTime)/MILLIS_IN_SECOND,i=(this.time.now-this.lastSpawnTime)/MILLIS_IN_SECOND,E=1.5/this.difficulty.difficultyNumber,_=Math.max(3*E-t/20,1.5),s=this.enemies.length<2;if(e||s||i>_)return!0}}class GameOver extends phaserExports.Scene{constructor(){super("GameOver"),__publicField(this,"camera"),__publicField(this,"background"),__publicField(this,"gameover_text")}create(){this.camera=this.cameras.main,this.camera.setBackgroundColor(16711680),this.background=this.add.image(512,384,"background"),this.background.setAlpha(.5),this.input.setDefaultCursor("auto"),this.gameover_text=this.add.text(512,384,`GOOD JOB! \n YOUR SCORE: ${this.registry.get("finalScore")} `,{fontFamily:"Arial Black",fontSize:64,color:"#ffffff",stroke:"#000000",strokeThickness:8,align:"center"}),this.gameover_text.setOrigin(.5),this.input.once("pointerdown",(()=>{this.scene.start("MainMenu")}))}}class MainMenu extends phaserExports.Scene{constructor(){super(MAIN_MENU_SCENE_KEY),__publicField(this,"background"),__publicField(this,"logo"),__publicField(this,"title"),__publicField(this,"menuContainer")}create(){this.input.setDefaultCursor(MAIN_MENU_CURSOR),this.background=this.add.image(GAME_MIDDLE_X,GAME_MIDDLE_Y,BACKGROUND_KEY).setTint(MAIN_MENU_BACKGROUND_TINT).setAlpha(MAIN_MENU_BACKGROUND_ALPHA),this.menuContainer=this.add.rectangle(MAIN_MENU_CONTAINER_X,MAIN_MENU_CONTAINER_Y,MAIN_MENU_CONTAINER_WIDTH,MAIN_MENU_CONTAINER_HEIGHT,MAIN_MENU_CONTAINER_FILL_COLOR,MAIN_MENU_CONTAINER_FILL_ALPHA).setStrokeStyle(MAIN_MENU_CONTAINER_STROKE_WIDTH,MAIN_MENU_CONTAINER_STROKE_COLOR),this.logo=this.add.image(GAME_MIDDLE_X,GAME_MIDDLE_Y,LOGO_KEY),this.logo.setY(this.logo.y-this.logo.displayHeight/2),this.registry.set(REGISTRY_DIFFICULTY_KEY,DIFFICULTIES[0]);for(let e=0;e<DIFFICULTIES.length;e++){const t=DIFFICULTIES[e],i=this.add.text(GAME_MIDDLE_X,GAME_MIDDLE_Y+30*t.difficultyNumber,t.label,MAIN_MENU_DIFFICULTY_SELECTOR_TEXT_STYLE).setOrigin(.5).setInteractive();i.setY(i.y+(i.displayHeight/2+2*MAIN_MENU_DIFFICULTY_SELECTOR_PADDING_Y)*e),i.once(POINTER_DOWN_EVENT_KEY,(()=>{this.registry.set(REGISTRY_DIFFICULTY_KEY,t),this.scene.start(GAME_SCENE_KEY)})),i.on(POINTER_OVER_EVENT_KEY,(()=>{i.setTint(MAIN_MENU_DIFFICULTY_SELECTOR_HIGHLIGHT_COLOR)})),i.on(POINTER_OUT_EVENT_KEY,(()=>{i.clearTint()}))}}}class Preloader extends phaserExports.Scene{constructor(){super(PRELOADER_SCENE_KEY)}init(){this.add.image(GAME_MIDDLE_X,GAME_MIDDLE_Y,BACKGROUND_KEY),this.add.rectangle(GAME_MIDDLE_X,GAME_MIDDLE_Y,PROGRESS_BAR_CONTAINER_WIDTH,PROGRESS_BAR_CONTAINER_HEIGHT).setStrokeStyle(PROGRESS_BAR_CONTAINER_STROKE_WIDTH,PROGRESS_BAR_CONTAINER_STROKE_COLOR);const e=this.add.rectangle(PROGRESS_BAR_FILL_X,PROGRESS_BAR_FILL_Y,PROGRESS_BAR_FILL_INITIAL_WIDTH,PROGRESS_BAR_FILL_HEIGHT,PROGRESS_BAR_FILL_COLOR);this.load.on(LOAD_PROGRESS_EVENT_KEY,(t=>{e.width=PROGRESS_BAR_FILL_MAX_WIDTH*t}))}preload(){this.load.setPath(ASSETS_PATH),this.load.image(LOGO_KEY,LOGO_FILENAME),this.load.json(MAP_NODES_KEY,MAP_NODES_FILENAME),this.load.emit(LOAD_PROGRESS_EVENT_KEY,.3),this.load.atlas(ATLAS_KEY,ATLAS_IMAGE_FILENAME,ATLAS_JSON_FILENAME),this.load.emit(LOAD_PROGRESS_EVENT_KEY,.7),this.load.atlas(PLAYER_SPRITE_ATLAS_KEY,PLAYER_SPRITE_ATLAS_IMAGE_FILENAME,PLAYER_SPRITE_ATLAS_JSON_FILENAME),this.load.emit(LOAD_PROGRESS_EVENT_KEY,.9),this.load.image(HUD_KEY,HUD_FILENAME),this.load.emit(LOAD_PROGRESS_EVENT_KEY,1)}create(){this.scene.start(MAIN_MENU_SCENE_KEY)}}const config={type:Phaser.AUTO,width:GAME_WIDTH,height:GAME_HEIGHT,parent:GAME_PARENT_KEY,backgroundColor:GAME_BACKGROUND_COLOR,scale:{mode:Phaser.Scale.FIT,autoCenter:Phaser.Scale.CENTER_BOTH},scene:[Boot,Preloader,MainMenu,Game,GameOver],physics:{default:GAME_DEFAULT_PHYSICS_SYSTEM,arcade:{debug:!1}}};new phaserExports.Game(config);
